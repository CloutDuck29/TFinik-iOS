// MARK: –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API)

import Foundation

class GoalService {
    private let baseURL = "http://10.255.255.239:8000"

    private func makeRequest(
        path: String,
        method: String,
        payload: [String: Any]? = nil
    ) -> URLRequest? {
        guard let token = TokenStorage.shared.accessToken else {
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞")
            return nil
        }

        guard let url = URL(string: baseURL + path) else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL: \(baseURL + path)")
            return nil
        }

        var request = URLRequest(url: url)
        request.httpMethod = method
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")

        if let payload = payload {
            if let body = try? JSONSerialization.data(withJSONObject: payload, options: [.prettyPrinted]) {
                request.httpBody = body
                print("üì¶ Payload:")
                print(String(data: body, encoding: .utf8) ?? "‚Äî")
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å payload")
            }
        }

        print("üöÄ –ó–∞–ø—Ä–æ—Å:")
        print("‚û°Ô∏è \(method) \(url.absoluteString)")
        print("ü™™ –ó–∞–≥–æ–ª–æ–≤–∫–∏: \(request.allHTTPHeaderFields ?? [:])")

        return request
    }

    func fetchGoals(completion: @escaping (Result<[FinancialGoalDTO], Error>) -> Void) {
        guard let request = makeRequest(path: "/goals/", method: "GET") else { return }

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ fetchGoals: \(error.localizedDescription)")
                completion(.failure(error))
                return
            }

            guard let data = data else {
                print("‚ùå fetchGoals: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"])))
                return
            }

            do {
                let goals = try JSONDecoder().decode([FinancialGoalDTO].self, from: data)
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ü–µ–ª–∏ (\(goals.count))")
                completion(.success(goals))
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π: \(error)")
                if let str = String(data: data, encoding: .utf8) {
                    print("üì® –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n\(str)")
                }
                completion(.failure(error))
            }
        }.resume()
    }

    func createGoal(name: String, targetAmount: Double, deadline: Date?, completion: @escaping (Result<Void, Error>) -> Void) {
        var payload: [String: Any] = [
            "name": name,
            "target_amount": targetAmount
        ]

        if let deadline = deadline {
            let formatter = ISO8601DateFormatter()
            formatter.formatOptions = [.withFullDate]
            payload["deadline"] = formatter.string(from: deadline)
        }

        guard let request = makeRequest(path: "/goals/", method: "POST", payload: payload) else { return }

        URLSession.shared.dataTask(with: request) { _, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ createGoal: \(error.localizedDescription)")
                completion(.failure(error))
            } else {
                print("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                completion(.success(()))
            }
        }.resume()
    }

    func updateGoal(id: Int, name: String?, targetAmount: Double?, deadline: Date?, completion: @escaping (Result<Void, Error>) -> Void) {
        var payload: [String: Any] = [:]

        if let name = name {
            payload["name"] = name
        }
        if let targetAmount = targetAmount {
            payload["target_amount"] = targetAmount
        }
        if let deadline = deadline {
            let formatter = ISO8601DateFormatter()
            formatter.formatOptions = [.withFullDate]
            payload["deadline"] = formatter.string(from: deadline)
        }

        guard let request = makeRequest(path: "/goals/\(id)", method: "PATCH", payload: payload) else { return }

        URLSession.shared.dataTask(with: request) { _, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ updateGoal: \(error.localizedDescription)")
                completion(.failure(error))
            } else {
                print("‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                completion(.success(()))
            }
        }.resume()
    }

    func addAmount(to goalId: Int, amount: Double, completion: @escaping (Result<Void, Error>) -> Void) {
        let payload = ["amount": amount]
        guard let request = makeRequest(path: "/goals/\(goalId)/add", method: "POST", payload: payload) else { return }

        URLSession.shared.dataTask(with: request) { _, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ addAmount: \(error.localizedDescription)")
                completion(.failure(error))
            } else {
                print("‚úÖ –°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                completion(.success(()))
            }
        }.resume()
    }
}
