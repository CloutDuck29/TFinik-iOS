import SwiftUI
import Charts

struct ExpenseForecastView: View {
    @State private var selectedMonth: String = ""
    @State private var forecastData: [ExpenseForecastItem] = []
    @EnvironmentObject var transactionStore: TransactionStore

    var body: some View {
        ZStack {
            BackgroundView()

            VStack(spacing: 24) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                VStack(spacing: 8) {
                    HStack(spacing: 8) {
                        Text("üîÆ")
                        Text("–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                            .bold()
                    }
                    .font(.title2)
                    .foregroundColor(.white)

                    Text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç—Ä–∞—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥")
                        .font(.subheadline)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                .padding(.top, -30)

                // –î–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                if forecastData.isEmpty {
                    ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        .padding(.top, 50)
                } else {
                    VStack {
                        Chart(forecastData) { item in
                            BarMark(
                                x: .value("–ú–µ—Å—è—Ü", item.month),
                                y: .value("–°—É–º–º–∞", abs(item.amount))  // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ç–æ–ª–±—Ü—ã —Ä–æ—Å–ª–∏ –≤–≤–µ—Ä—Ö
                            )
                            .foregroundStyle(Color.purple)
                            .cornerRadius(10)  // —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                            .annotation(position: .top) {
                                Text("\(Int(item.amount))‚ÇΩ")
                                    .font(.caption)
                                    .foregroundColor(.white)
                            }
                        }
                        .frame(height: 200)
                        .padding()
                        .background(Color.black.opacity(0.2))
                        .clipShape(RoundedRectangle(cornerRadius: 20))  // —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
                    }
                    .padding(.horizontal)
                }

                // –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (Picker –≤–º–µ—Å—Ç–æ DatePicker)
                HStack {
                    Text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü")
                        .font(.headline)
                        .foregroundColor(.white)

                    Spacer()

                    if !forecastData.isEmpty {
                        Picker("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", selection: $selectedMonth) {
                            ForEach(forecastData.map { $0.month }, id: \.self) { month in
                                Text(month).tag(month)
                            }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                        .frame(maxWidth: 300)
                    }
                }
                .padding(.horizontal)

                // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–∞—Å—Ö–æ–¥—ã)
                VStack(spacing: 0) {
                    let recentExpenses = transactionStore.transactions.filter { !$0.isIncome }.prefix(3)
                    ForEach(recentExpenses) { tx in
                        HStack {
                            Image(systemName: "cart.fill")
                                .foregroundColor(.pink)
                                .frame(width: 30)
                            Text(tx.category)
                                .foregroundColor(.pink)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            Text(tx.date.prefix(7))
                                .foregroundColor(.gray)
                            Text("\(Int(tx.amount))‚ÇΩ")
                                .foregroundColor(.white)
                                .padding(.leading, 4)
                        }
                        .padding(.vertical, 10)
                        .padding(.horizontal)

                        if tx.id != recentExpenses.last?.id {
                            Divider()
                                .background(Color.white.opacity(0.1))
                        }
                    }
                }
                .background(Color.black.opacity(0.2))
                .clipShape(RoundedRectangle(cornerRadius: 16))
                .padding(.horizontal)
                .padding(.bottom)
            }
        }
        .ignoresSafeArea()
        .onAppear {
            if let firstMonth = forecastData.first?.month {
                selectedMonth = firstMonth
            }

            print("üìä –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            for tx in transactionStore.transactions {
                print("üßæ \(tx.date) | \(tx.amount)‚ÇΩ | isIncome: \(tx.isIncome) | \(tx.category)")
            }

            let expensesOnly = transactionStore.transactions.filter { !$0.isIncome }
            print("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: \(expensesOnly.count)")
            expensesOnly.forEach {
                print("üßæ \($0.date) ‚Äî \($0.amount)‚ÇΩ ‚Äî \($0.category)")
            }

            if expensesOnly.isEmpty {
                print("‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                return
            }

            ForecastService.shared.fetchForecast(transactions: expensesOnly) { result in
                DispatchQueue.main.async {
                    switch result {
                    case .success(let forecast):
                        self.forecastData = forecast
                        if let firstMonth = forecast.first?.month {
                            self.selectedMonth = firstMonth
                        }
                        print("‚úÖ Forecast received:", forecast)
                    case .failure(let error):
                        print("‚ùå Forecast error:", error.localizedDescription)
                    }
                }
            }
        }
    }
}
