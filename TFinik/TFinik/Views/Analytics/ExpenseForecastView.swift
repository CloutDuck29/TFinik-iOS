import SwiftUI
import Charts

struct ExpenseForecastView: View {
    struct Forecast: Identifiable {
        let id = UUID()
        let month: String
        let amount: Double
    }

    struct ForecastDetail: Identifiable {
        let id = UUID()
        let category: String
        let month: String
        let amount: Double
    }

    @State private var selectedDate = Date()

    let forecastData = [
        Forecast(month: "–ò—é–Ω—å", amount: 30000),
        Forecast(month: "–ò—é–ª—å", amount: 60000),
        Forecast(month: "–ê–≤–≥—É—Å—Ç", amount: 190000)
    ]

    let details = [
        ForecastDetail(category: "–ú–∞–≥–∞–∑–∏–Ω—ã", month: "–ò—é–Ω—å", amount: -2500),
        ForecastDetail(category: "–ú–∞–≥–∞–∑–∏–Ω—ã", month: "–ò—é–Ω—å", amount: -2500),
        ForecastDetail(category: "–ú–∞–≥–∞–∑–∏–Ω—ã", month: "–ò—é–Ω—å", amount: -2500)
    ]

    var body: some View {
        ZStack {
            BackgroundView()

            VStack(spacing: 24) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                VStack(spacing: 8) {
                    HStack(spacing: 8) {
                        Text("üîÆ")
                        Text("–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                            .bold()
                    }
                    .font(.title2)
                    .foregroundColor(.white)

                    Text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç—Ä–∞—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥")
                        .font(.subheadline)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                .padding(.top, -30)

                // –î–∏–∞–≥—Ä–∞–º–º–∞
                VStack {
                    Chart(forecastData) { item in
                        BarMark(
                            x: .value("–ú–µ—Å—è—Ü", item.month),
                            y: .value("–°—É–º–º–∞", item.amount)
                        )
                        .foregroundStyle(Color.purple)
                        .cornerRadius(10)
                        .annotation(position: .top) {
                            Text("\(Int(item.amount)).000–†")
                                .font(.caption)
                                .foregroundColor(.white)
                        }
                    }
                    .frame(height: 200)
                    .padding()
                    .background(Color.black.opacity(0.2))
                    .clipShape(RoundedRectangle(cornerRadius: 20))
                }
                .padding(.horizontal)

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ + DatePicker
                HStack {
                    Text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü")
                        .font(.headline)
                        .foregroundColor(.white)

                    Spacer()

                    DatePicker("", selection: $selectedDate, displayedComponents: [.date])
                        .datePickerStyle(.compact)
                        .labelsHidden()
                }
                .padding(.horizontal)

                // –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç
                VStack(spacing: 0) {
                    ForEach(Array(details.enumerated()), id: \.element.id) { index, detail in
                        HStack {
                            Image(systemName: "cart.fill")
                                .foregroundColor(.pink)
                                .frame(width: 30)
                            Text(detail.category)
                                .foregroundColor(.pink)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            Text(detail.month)
                                .foregroundColor(.gray)
                            Text("\(Int(detail.amount))‚ÇΩ")
                                .foregroundColor(.white)
                                .padding(.leading, 4)
                        }
                        .padding(.vertical, 10)
                        .padding(.horizontal)

                        if index < details.count - 1 {
                            Divider()
                                .background(Color.white.opacity(0.1))
                        }
                    }
                }
                .background(Color.black.opacity(0.2))
                .clipShape(RoundedRectangle(cornerRadius: 16))
                .padding(.horizontal)
                .padding(.bottom)
            }
        }
        .ignoresSafeArea()
    }
}
