// MARK: - –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤

import SwiftUI
import Charts

struct ExpenseForecastView: View {
    @State private var selectedMonth: String = ""
    @State private var forecastData: [ExpenseForecastItem] = []
    @State private var forecastCategories: [ExpenseForecastCategory] = []
    @EnvironmentObject var transactionStore: TransactionStore
    @State private var forecastErrorMessage: String? = nil

    var body: some View {
        ZStack {
            BackgroundView()

            VStack(spacing: 24) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                VStack(spacing: 8) {
                    HStack(spacing: 8) {
                        Text("üîÆ")
                        Text("–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                            .bold()
                    }
                    .font(.title2)
                    .foregroundColor(.white)

                    Text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç—Ä–∞—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥")
                        .font(.subheadline)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                .padding(.top, -30)

                // –î–∏–∞–≥—Ä–∞–º–º–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
                if let errorMessage = forecastErrorMessage {
                    VStack(spacing: 12) {
                        Text("‚ö†Ô∏è \(errorMessage)")
                            .foregroundColor(.red)
                            .multilineTextAlignment(.center)
                            .padding(.top, 50)

                        Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É") {
                            loadForecast()
                        }
                        .padding(10)
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                } else if forecastData.isEmpty {
                    ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        .padding(.top, 50)
                } else {
                    VStack {
                        Chart(forecastData) { item in
                            BarMark(
                                x: .value("–ú–µ—Å—è—Ü", item.month),
                                y: .value("–°—É–º–º–∞", abs(item.amount))
                            )
                            .foregroundStyle(Color.purple)
                            .cornerRadius(10)
                            .annotation(position: .top) {
                                Text("\(Int(item.amount))‚ÇΩ")
                                    .font(.caption)
                                    .foregroundColor(.white)
                            }
                        }
                        .frame(height: 200)
                        .padding()
                        .background(Color.black.opacity(0.2))
                        .clipShape(RoundedRectangle(cornerRadius: 20))
                    }
                    .padding(.horizontal)
                }

                // –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
                if forecastErrorMessage == nil && !forecastData.isEmpty {
                    HStack {
                        Text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü")
                            .font(.headline)
                            .foregroundColor(.white)

                        Spacer()

                        Picker("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", selection: $selectedMonth) {
                            ForEach(forecastData.map { $0.month }, id: \.self) { month in
                                Text(month).tag(month)
                            }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                        .frame(maxWidth: 300)
                        .onChange(of: selectedMonth) { newMonth in
                            loadCategories(for: newMonth)
                        }
                    }
                    .padding(.horizontal)
                }

                // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                if forecastErrorMessage == nil {
                    if forecastCategories.isEmpty && !forecastData.isEmpty {
                        Text("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
                            .foregroundColor(.gray)
                            .padding()
                    } else {
                        VStack(alignment: .leading, spacing: 10) {
                            Text("–¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç –∑–∞ \(selectedMonth)")
                                .foregroundColor(.white)
                                .font(.headline)
                                .padding(.top, 16) // üëà –≤–æ—Ç —ç—Ç–æ—Ç –æ—Ç—Å—Ç—É–ø –≤–Ω—É—Ç—Ä—å –ø–ª–∞—à–∫–∏

                            ForEach(forecastCategories) { cat in
                                HStack {
                                    Text(cat.category)
                                        .foregroundColor(.pink)
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                    Text("\(Int(cat.amount))‚ÇΩ")
                                        .foregroundColor(.white)
                                }
                            }
                        }
                        .padding(.horizontal)
                        .padding(.bottom)
                        .background(Color.black.opacity(0.2))
                        .clipShape(RoundedRectangle(cornerRadius: 16))
                        .padding(.horizontal)
                    }
                }
            }
        }
        .ignoresSafeArea()
        .onAppear {
            loadForecast()
        }
    }

    private func loadForecast() {
        let expensesOnly = transactionStore.transactions.filter { !$0.isIncome }
        if expensesOnly.isEmpty {
            self.forecastErrorMessage = "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            return
        }

        self.forecastErrorMessage = nil
        self.forecastData = []
        self.forecastCategories = []

        ForecastService.shared.fetchForecast(transactions: expensesOnly) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let forecast):
                    self.forecastData = forecast
                    if let firstMonth = forecast.first?.month {
                        self.selectedMonth = firstMonth
                        loadCategories(for: firstMonth)
                    }
                case .failure(let error):
                    print("‚ùå Forecast error:", error.localizedDescription)

                    if let nsError = error as NSError?,
                       let detail = (nsError.userInfo[NSLocalizedDescriptionKey] as? String)?
                           .data(using: .utf8)
                           .flatMap({ try? JSONSerialization.jsonObject(with: $0) }) as? [String: String],
                       let message = detail["detail"] {
                        self.forecastErrorMessage = message
                    } else {
                        self.forecastErrorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"
                    }
                }
            }
        }
    }

    private func loadCategories(for month: String) {
        let expensesOnly = transactionStore.transactions.filter { !$0.isIncome }
        if expensesOnly.isEmpty { return }

        ForecastService.shared.fetchCategoryForecast(month: month, transactions: Array(expensesOnly)) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let categories):
                    self.forecastCategories = categories
                case .failure(let error):
                    print("‚ùå Category forecast error:", error.localizedDescription)
                    self.forecastCategories = []
                }
            }
        }
    }
}
