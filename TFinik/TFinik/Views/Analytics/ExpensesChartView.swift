import SwiftUI
import Charts

// MARK: - –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
struct ExpenseCategory: Identifiable {
    let id = UUID()
    let name: String
    let amount: Double
    let color: Color
}

// MARK: - –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
struct AnalyticsResponse: Codable {
    let totalSpent: Double
    let period: Period
    let categories: [CategoryData]

    struct Period: Codable {
        let start: String
        let end: String
    }

    struct CategoryData: Codable {
        let category: String
        let amount: Double
    }
}

// MARK: - –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
struct ExpensesChartView: View {
    @State private var isLoading = true
    @State private var loadedTotalSpent: Double = 0
    @State private var loadedPeriodStart: String = ""
    @State private var loadedPeriodEnd: String = ""
    @State private var loadedCategories: [ExpenseCategory] = []
    @State private var isUnauthorized = false

    var body: some View {
        ZStack {
            BackgroundView()

            if isLoading {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
            } else {
                VStack(spacing: 24) {
                    HStack {
                        Text("üí∞")
                            .font(.system(size: 32))
                        Text("–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                            .font(.title2.bold())
                            .foregroundColor(.white)
                    }
                    .padding(.top, 125) // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                

                    PieChartView(categories: loadedCategories)
                        .frame(height: 250)
                        .padding(.top, 8)

                    VStack(spacing: 4) {
                        Text("–¢—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ (\(loadedPeriodStart) ‚Äî \(loadedPeriodEnd))")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                        Text("\(Int(loadedTotalSpent))‚ÇΩ")
                            .font(.title.bold())
                            .foregroundColor(.white)
                    }

                    ScrollView {
                        VStack(spacing: 12) {
                            ForEach(loadedCategories) { category in
                                HStack {
                                    Circle()
                                        .fill(category.color)
                                        .frame(width: 12, height: 12)
                                    Text(category.name)
                                        .foregroundColor(.white)
                                    Spacer()
                                    Text("\(Int(category.amount))‚ÇΩ")
                                        .foregroundColor(.white)
                                }
                                .padding(.horizontal)
                            }
                        }
                    }

                    Spacer()
                }
                .padding()
            }
        }
        .fullScreenCover(isPresented: $isUnauthorized) {
            LoginView()
        }
        .navigationBarBackButtonHidden(false)
        .ignoresSafeArea()
        .onAppear {
            loadAnalytics()
        }
    }


    private func loadAnalytics() {
        if TokenStorage.shared.accessToken == nil {
            TokenStorage.shared.accessToken = KeychainHelper.shared.readAccessToken()
        }
        guard let url = URL(string: "http://169.254.218.217:8000/analytics/categories"),
              let token = TokenStorage.shared.accessToken else {
            print("‚ùå URL –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
                return
            }

            if let response = response as? HTTPURLResponse, response.statusCode == 401 {
                print("‚ö†Ô∏è –ü–æ–ª—É—á–∏–ª–∏ 401 ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
                
                AuthService().refreshAccessTokenIfNeeded { success in
                    if success {
                        print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å")
                        DispatchQueue.main.async {
                            self.loadAnalytics() // –ü–û–í–¢–û–†–Ø–ï–ú –∑–∞–ø—Ä–æ—Å
                        }
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                        DispatchQueue.main.async {
                            self.isUnauthorized = true
                        }
                    }
                }
                return
            }

            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return
            }

            do {
                let decoded = try JSONDecoder().decode(AnalyticsResponse.self, from: data)

                DispatchQueue.main.async {
                    self.loadedTotalSpent = decoded.totalSpent
                    self.loadedPeriodStart = decoded.period.start
                    self.loadedPeriodEnd = decoded.period.end
                    self.loadedCategories = decoded.categories.map { cat in
                        ExpenseCategory(
                            name: cat.category,
                            amount: cat.amount,
                            color: color(for: cat.category)
                        )
                    }
                    self.isLoading = false
                }
            } catch {
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error.localizedDescription)")
                    if let json = String(data: data, encoding: .utf8) {
                        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(json)")
                    }
                }
            }
        }.resume()
    }

    
    private func color(for category: String) -> Color {
        let colorMapping: [String: Color] = [
            "–ö–æ—Ñ–µ–π–Ω–∏": .orange,
            "–ú–∞–≥–∞–∑–∏–Ω—ã": .blue,
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": .purple,
            "–î–æ—Å—Ç–∞–≤–∫–∞/–ï–¥–∞": .brown,
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": .green,
            "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": .gray,
            "–ñ–ö–•/–ö–æ–º–º—É–Ω–∞–ª–∫–∞": .teal,
            "–ü–µ—Ä–µ–≤–æ–¥—ã": .red,
            "–î—Ä—É–≥–∏–µ": .mint
        ]
        
        return colorMapping[category] ?? .gray
    }

}


// MARK: - –ö–∞—Å—Ç–æ–º–Ω–∞—è PieChart –¥–∏–∞–≥—Ä–∞–º–º–∞
struct PieChartView: View {
    let categories: [ExpenseCategory]

    var body: some View {
        Chart {
            ForEach(categories) { category in
                SectorMark(
                    angle: .value("Amount", category.amount),
                    innerRadius: .ratio(0.6),
                    angularInset: 1
                )
                .foregroundStyle(category.color)
                .cornerRadius(4)
            }
        }
        .chartBackground { proxy in
            GeometryReader { geo in
                VStack {
                    Text("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ")
                        .multilineTextAlignment(.center)
                        .font(.caption)
                        .foregroundColor(.gray)
                    Text("\(Int(categories.map { $0.amount }.reduce(0, +)))‚ÇΩ")
                        .font(.headline.bold())
                        .foregroundColor(.white)
                }
                .position(x: geo.size.width / 2, y: geo.size.height / 2)
            }
        }
    }
}
